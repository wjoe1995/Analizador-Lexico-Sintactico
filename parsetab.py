
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASIGNARleftSUMARESTAleftMULTDIVrightCONCATMOSTRARleftFORASIGNAR CADENA COMDOB CONCAT CORDER CORIZQ DIV ENTERO FOR IDENTIFICADOR LLADER LLAIZQ MODULO MOSTRAR MULT PARDER PARIZQ POTENCIA RESTA SUMA\n    declaracion     :    MOSTRAR PARIZQ expresion PARDER\n                    |    MOSTRAR  PARIZQ CADENA PARDER\n    expresion : ENTERO  FOR  CADENA\n    declaracion : CADENA CONCAT CADENA \n                | CADENA CONCAT CADENA CONCAT CADENA\n                | CADENA CONCAT CADENA CONCAT CADENA CONCAT CADENA\n                | CADENA CONCAT CADENA CONCAT CADENA CONCAT CADENA CONCAT CADENA\n    \n    declaracion :  IDENTIFICADOR ASIGNAR expresion\n                |  IDENTIFICADOR ASIGNAR CADENA\n    declaracion : expresion\n    expresion  :    expresion SUMA expresion\n                |   expresion RESTA expresion\n                |   expresion MULT expresion\n                |   expresion DIV expresion\n                |   expresion POTENCIA expresion\n                |   expresion MODULO expresion\n    \n    expresion  :  PARIZQ expresion PARDER\n                | LLAIZQ expresion LLADER\n                | CORIZQ expresion CORDER\n    \n    expresion : ENTERO\n    declaracion : COMDOB expresion COMDOBexpresion : IDENTIFICADOR'
    
_lr_action_items = {'MOSTRAR':([0,],[2,]),'CADENA':([0,11,20,21,23,44,46,48,],[5,27,35,37,39,45,47,49,]),'IDENTIFICADOR':([0,3,7,9,10,11,14,15,16,17,18,19,21,],[6,13,13,13,13,13,13,13,13,13,13,13,13,]),'COMDOB':([0,8,13,22,28,29,30,31,32,33,34,39,40,41,],[7,-20,-22,38,-17,-11,-12,-13,-14,-15,-16,-3,-18,-19,]),'ENTERO':([0,3,7,9,10,11,14,15,16,17,18,19,21,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'PARIZQ':([0,2,3,7,9,10,11,14,15,16,17,18,19,21,],[3,11,3,3,3,3,3,3,3,3,3,3,3,3,]),'LLAIZQ':([0,3,7,9,10,11,14,15,16,17,18,19,21,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'CORIZQ':([0,3,7,9,10,11,14,15,16,17,18,19,21,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,4,6,8,13,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,49,],[0,-10,-22,-20,-22,-17,-11,-12,-13,-14,-15,-16,-4,-8,-9,-21,-3,-18,-19,-1,-2,-5,-6,-7,]),'SUMA':([4,6,8,12,13,22,24,25,26,28,29,30,31,32,33,34,36,39,40,41,],[14,-22,-20,14,-22,14,14,14,14,-17,-11,-12,-13,-14,14,14,14,-3,-18,-19,]),'RESTA':([4,6,8,12,13,22,24,25,26,28,29,30,31,32,33,34,36,39,40,41,],[15,-22,-20,15,-22,15,15,15,15,-17,-11,-12,-13,-14,15,15,15,-3,-18,-19,]),'MULT':([4,6,8,12,13,22,24,25,26,28,29,30,31,32,33,34,36,39,40,41,],[16,-22,-20,16,-22,16,16,16,16,-17,16,16,-13,-14,16,16,16,-3,-18,-19,]),'DIV':([4,6,8,12,13,22,24,25,26,28,29,30,31,32,33,34,36,39,40,41,],[17,-22,-20,17,-22,17,17,17,17,-17,17,17,-13,-14,17,17,17,-3,-18,-19,]),'POTENCIA':([4,6,8,12,13,22,24,25,26,28,29,30,31,32,33,34,36,39,40,41,],[18,-22,-20,18,-22,18,18,18,18,-17,-11,-12,-13,-14,18,18,18,-3,-18,-19,]),'MODULO':([4,6,8,12,13,22,24,25,26,28,29,30,31,32,33,34,36,39,40,41,],[19,-22,-20,19,-22,19,19,19,19,-17,-11,-12,-13,-14,19,19,19,-3,-18,-19,]),'CONCAT':([5,35,45,47,],[20,44,46,48,]),'ASIGNAR':([6,],[21,]),'FOR':([8,],[23,]),'PARDER':([8,12,13,26,27,28,29,30,31,32,33,34,39,40,41,],[-20,28,-22,42,43,-17,-11,-12,-13,-14,-15,-16,-3,-18,-19,]),'LLADER':([8,13,24,28,29,30,31,32,33,34,39,40,41,],[-20,-22,40,-17,-11,-12,-13,-14,-15,-16,-3,-18,-19,]),'CORDER':([8,13,25,28,29,30,31,32,33,34,39,40,41,],[-20,-22,41,-17,-11,-12,-13,-14,-15,-16,-3,-18,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaracion':([0,],[1,]),'expresion':([0,3,7,9,10,11,14,15,16,17,18,19,21,],[4,12,22,24,25,26,29,30,31,32,33,34,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaracion","S'",1,None,None,None),
  ('declaracion -> MOSTRAR PARIZQ expresion PARDER','declaracion',4,'p_declaracion_mosrar','analizador_sintactico.py',19),
  ('declaracion -> MOSTRAR PARIZQ CADENA PARDER','declaracion',4,'p_declaracion_mosrar','analizador_sintactico.py',20),
  ('expresion -> ENTERO FOR CADENA','expresion',3,'p_expresion_for','analizador_sintactico.py',25),
  ('declaracion -> CADENA CONCAT CADENA','declaracion',3,'p_declaracion_concat','analizador_sintactico.py',32),
  ('declaracion -> CADENA CONCAT CADENA CONCAT CADENA','declaracion',5,'p_declaracion_concat','analizador_sintactico.py',33),
  ('declaracion -> CADENA CONCAT CADENA CONCAT CADENA CONCAT CADENA','declaracion',7,'p_declaracion_concat','analizador_sintactico.py',34),
  ('declaracion -> CADENA CONCAT CADENA CONCAT CADENA CONCAT CADENA CONCAT CADENA','declaracion',9,'p_declaracion_concat','analizador_sintactico.py',35),
  ('declaracion -> IDENTIFICADOR ASIGNAR expresion','declaracion',3,'p_declaracion_asignar','analizador_sintactico.py',48),
  ('declaracion -> IDENTIFICADOR ASIGNAR CADENA','declaracion',3,'p_declaracion_asignar','analizador_sintactico.py',49),
  ('declaracion -> expresion','declaracion',1,'p_declaracion_expre','analizador_sintactico.py',57),
  ('expresion -> expresion SUMA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',63),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',64),
  ('expresion -> expresion MULT expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',65),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',66),
  ('expresion -> expresion POTENCIA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',67),
  ('expresion -> expresion MODULO expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',68),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',89),
  ('expresion -> LLAIZQ expresion LLADER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',90),
  ('expresion -> CORIZQ expresion CORDER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',91),
  ('expresion -> ENTERO','expresion',1,'p_expresion_numero','analizador_sintactico.py',97),
  ('declaracion -> COMDOB expresion COMDOB','declaracion',3,'p_declaracion_cadena','analizador_sintactico.py',102),
  ('expresion -> IDENTIFICADOR','expresion',1,'p_expresion_nombre','analizador_sintactico.py',106),
]
