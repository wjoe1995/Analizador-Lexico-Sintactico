
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASIGNARleftSUMARESTAleftMULTDIVrightMOSTRARleftFORCONCATASIGNAR CADENA COMDOB CONCAT CORDER CORIZQ DIV ENTERO FOR IDENTIFICADOR LLADER LLAIZQ MODULO MOSTRAR MULT PARDER PARIZQ POTENCIA RESTA SUMA\n    declaracion     :    MOSTRAR  PARIZQ expresion PARDER \n                    |    MOSTRAR  PARIZQ CADENA PARDER \n    expresion : ENTERO  FOR  CADENA\n    expresion   :  expresion  CONCAT  expresion \n                |  expresion  CONCAT  CADENA\n                |  CADENA  CONCAT  expresion\n                |  CADENA  CONCAT  CADENA\n    \n    declaracion :  IDENTIFICADOR ASIGNAR expresion  \n                |  IDENTIFICADOR ASIGNAR CADENA \n    \n    declaracion : expresion\n                | CADENA\n    \n    expresion  :    expresion SUMA expresion        \n                |   expresion RESTA expresion       \n                |   expresion MULT expresion        \n                |   expresion DIV expresion         \n                |   expresion POTENCIA expresion    \n                |   expresion MODULO expresion      \n    \n    expresion  :  PARIZQ expresion PARDER   \n                | LLAIZQ expresion LLADER   \n                | CORIZQ expresion CORDER   \n    \n    expresion : ENTERO \n    \n    expresion   : COMDOB CADENA COMDOB\n    \n    expresion : IDENTIFICADOR\n    '
    
_lr_action_items = {'MOSTRAR':([0,],[2,]),'IDENTIFICADOR':([0,3,8,9,11,15,16,17,18,19,20,21,22,23,],[6,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'CADENA':([0,3,8,9,10,11,15,16,17,18,19,20,21,22,23,24,],[5,13,13,13,27,29,32,13,13,13,13,13,13,39,42,43,]),'ENTERO':([0,3,8,9,11,15,16,17,18,19,20,21,22,23,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'PARIZQ':([0,2,3,8,9,11,15,16,17,18,19,20,21,22,23,],[3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'LLAIZQ':([0,3,8,9,11,15,16,17,18,19,20,21,22,23,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'CORIZQ':([0,3,8,9,11,15,16,17,18,19,20,21,22,23,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'COMDOB':([0,3,8,9,11,15,16,17,18,19,20,21,22,23,27,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,46,]),'$end':([1,4,5,6,7,14,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,],[0,-10,-11,-23,-21,-23,-18,-4,-5,-12,-13,-14,-15,-16,-17,-7,-6,-8,-9,-3,-19,-20,-22,-1,-2,]),'CONCAT':([4,5,6,7,12,13,14,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[15,22,-23,-21,15,22,-23,15,15,15,22,-18,-4,22,15,15,15,15,15,15,22,-6,15,22,-3,-19,-20,-22,]),'SUMA':([4,6,7,12,14,25,26,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,],[16,-23,-21,16,-23,16,16,16,-18,-4,-5,-12,-13,-14,-15,16,16,-7,-6,16,-3,-19,-20,-22,]),'RESTA':([4,6,7,12,14,25,26,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,],[17,-23,-21,17,-23,17,17,17,-18,-4,-5,-12,-13,-14,-15,17,17,-7,-6,17,-3,-19,-20,-22,]),'MULT':([4,6,7,12,14,25,26,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,],[18,-23,-21,18,-23,18,18,18,-18,-4,-5,18,18,-14,-15,18,18,-7,-6,18,-3,-19,-20,-22,]),'DIV':([4,6,7,12,14,25,26,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,],[19,-23,-21,19,-23,19,19,19,-18,-4,-5,19,19,-14,-15,19,19,-7,-6,19,-3,-19,-20,-22,]),'POTENCIA':([4,6,7,12,14,25,26,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,],[20,-23,-21,20,-23,20,20,20,-18,-4,-5,-12,-13,-14,-15,20,20,-7,-6,20,-3,-19,-20,-22,]),'MODULO':([4,6,7,12,14,25,26,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,],[21,-23,-21,21,-23,21,21,21,-18,-4,-5,-12,-13,-14,-15,21,21,-7,-6,21,-3,-19,-20,-22,]),'ASIGNAR':([6,],[23,]),'FOR':([7,],[24,]),'PARDER':([7,12,14,28,29,30,31,32,33,34,35,36,37,38,39,40,43,44,45,46,],[-21,30,-23,47,48,-18,-4,-5,-12,-13,-14,-15,-16,-17,-7,-6,-3,-19,-20,-22,]),'LLADER':([7,14,25,30,31,32,33,34,35,36,37,38,39,40,43,44,45,46,],[-21,-23,44,-18,-4,-5,-12,-13,-14,-15,-16,-17,-7,-6,-3,-19,-20,-22,]),'CORDER':([7,14,26,30,31,32,33,34,35,36,37,38,39,40,43,44,45,46,],[-21,-23,45,-18,-4,-5,-12,-13,-14,-15,-16,-17,-7,-6,-3,-19,-20,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaracion':([0,],[1,]),'expresion':([0,3,8,9,11,15,16,17,18,19,20,21,22,23,],[4,12,25,26,28,31,33,34,35,36,37,38,40,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaracion","S'",1,None,None,None),
  ('declaracion -> MOSTRAR PARIZQ expresion PARDER','declaracion',4,'p_declaracion_mosrar','analizador_sintactico.py',19),
  ('declaracion -> MOSTRAR PARIZQ CADENA PARDER','declaracion',4,'p_declaracion_mosrar','analizador_sintactico.py',20),
  ('expresion -> ENTERO FOR CADENA','expresion',3,'p_expresion_for','analizador_sintactico.py',27),
  ('expresion -> expresion CONCAT expresion','expresion',3,'p_expresion_concat','analizador_sintactico.py',35),
  ('expresion -> expresion CONCAT CADENA','expresion',3,'p_expresion_concat','analizador_sintactico.py',36),
  ('expresion -> CADENA CONCAT expresion','expresion',3,'p_expresion_concat','analizador_sintactico.py',37),
  ('expresion -> CADENA CONCAT CADENA','expresion',3,'p_expresion_concat','analizador_sintactico.py',38),
  ('declaracion -> IDENTIFICADOR ASIGNAR expresion','declaracion',3,'p_declaracion_asignar','analizador_sintactico.py',56),
  ('declaracion -> IDENTIFICADOR ASIGNAR CADENA','declaracion',3,'p_declaracion_asignar','analizador_sintactico.py',57),
  ('declaracion -> expresion','declaracion',1,'p_declaracion_expre','analizador_sintactico.py',68),
  ('declaracion -> CADENA','declaracion',1,'p_declaracion_expre','analizador_sintactico.py',69),
  ('expresion -> expresion SUMA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',78),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',79),
  ('expresion -> expresion MULT expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',80),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',81),
  ('expresion -> expresion POTENCIA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',82),
  ('expresion -> expresion MODULO expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',83),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',110),
  ('expresion -> LLAIZQ expresion LLADER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',111),
  ('expresion -> CORIZQ expresion CORDER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',112),
  ('expresion -> ENTERO','expresion',1,'p_expresion_numero','analizador_sintactico.py',121),
  ('expresion -> COMDOB CADENA COMDOB','expresion',3,'p_expresion_cadena','analizador_sintactico.py',128),
  ('expresion -> IDENTIFICADOR','expresion',1,'p_expresion_nombre','analizador_sintactico.py',135),
]
